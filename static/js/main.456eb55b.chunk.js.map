{"version":3,"sources":["components/avatar/Avatar.module.css","components/loader/Loader.module.css","components/events-list/EventsList.module.css","components/avatar/index.ts","components/avatar/Avatar.tsx","components/event-card/index.ts","components/event-card/EventCard.tsx","components/loader/index.ts","components/loader/Loader.tsx","utils/get-funding-pot-id.ts","utils/get-user-address.ts","utils/event-message.tsx","utils/events-by-type.ts","utils/connection.ts","utils/get-events-list.tsx","components/events-list/index.ts","components/events-list/EventsList.tsx","App.js","reportWebVitals.js","index.js","components/event-card/EventCard.module.css"],"names":["module","exports","Avatar","identity","className","styles","seed","size","scale","EventCard","userAddress","message","timestamp","eventType","useState","height","setHeight","CachedAvatar","useMemo","cachedDate","Date","toLocaleDateString","day","month","onEnter","useCallback","onLeave","onMouseEnter","onMouseLeave","EventCardBody","duration","EventCardTitle","Loader","getFundingPotId","fundingPotId","values","utils","BigNumber","toString","getUserAddress","parsedData","client","connection","user","getFundingPot","associatedTypeId","getPayment","recipient","eventMessage","tokenToSymbol","domainId","events","ColonyInitialised","DomainAdded","ColonyRoleSet","role","ColonyRole","PayoutClaimed","amount","wei","div","pow","token","populateEventFields","event","colonyAddress","getBlockTime","provider","blockHash","parsed","interface","parseLog","eventsByType","getLogs","filters","rawEvents","Promise","all","map","eventsFields","connect","InfuraProvider","wallet","Wallet","createRandom","connectedWallet","networkClient","getColonyNetworkClient","Network","Mainnet","networkAddress","getColonyClient","colonyClient","getEventsList","eventTypes","getEvents","bind","flat","sort","a","b","EventsList","setEvents","hasError","setHasError","isLoaded","setIsLoaded","messageForError","messageForNone","useEffect","eventsList","console","warn","length","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.456eb55b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Avatar_Avatar__1-pej\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__1G8Of\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EventsList\":\"EventsList_EventsList__3YT7f\",\"fade-shadow\":\"EventsList_fade-shadow__2R6Gs\"};","import Avatar from \"./Avatar\";\n\nexport default Avatar;","import Blockies from 'react-blockies';\nimport styles from './Avatar.module.css';\n\nconst Avatar = ({ identity }: {identity: string}) => {\n  return (\n    <Blockies\n      className={styles.Avatar}\n      seed={identity}\n      size={10}\n      scale={3.7}\n    />\n  );\n}\n\nexport default Avatar;","import EventCard from \"./EventCard\";\n\nexport type { Props as EventItemProps } from './EventCard'\nexport default EventCard;","import { useCallback, useMemo, useState } from 'react';\nimport Avatar from '../avatar';\nimport styles from './EventCard.module.css';\nimport AnimateHeight from 'react-animate-height';\nimport type { EventType } from '../../utils/get-events-list';\n\nexport interface Props {\n  timestamp: number;\n  message: React.ReactElement;\n  userAddress: string;\n  eventType: EventType;\n}\n\nconst EventCard = ({ userAddress, message, timestamp, eventType }: Props) => {\n\n  const collapsedTitleHeight = 20;\n  const [height, setHeight] = useState<'auto' | number>(collapsedTitleHeight);\n\n  const CachedAvatar = useMemo(() =>\n    <Avatar identity={userAddress} />,\n    [userAddress]\n  );\n  const cachedDate = useMemo(() => (\n    new Date(timestamp).toLocaleDateString('en-UK', {\n      day: 'numeric',\n      month: 'short',\n    })\n  ), [timestamp]);\n\n  const onEnter = useCallback(() => setHeight('auto'), []);\n  const onLeave = useCallback(() => setHeight(collapsedTitleHeight), []);\n\n  return (\n    <li\n      className={styles.EventCard}\n      data-event={eventType}\n      onMouseEnter={onEnter}\n      onMouseLeave={onLeave}\n    >\n      {CachedAvatar}\n      <div className={styles.EventCardBody}>\n        <AnimateHeight\n          duration={200}\n          height={height}\n        >\n          <h2 className={styles.EventCardTitle}>{message}</h2>\n        </AnimateHeight>\n        <time>{cachedDate}</time>\n      </div>\n    </li>\n  );\n\n};\n\nexport default EventCard;\n","import Loader from './Loader';\n\nexport default Loader;","import styles from './Loader.module.css';\n\nconst Loader = ({ message }: { message?: React.ReactElement }) => {\n\n  return (\n    <div className={styles.Loader}>\n      {message ? message : <h1>Loading...</h1>}\n    </div>\n  );\n\n}\n\nexport default Loader;","import { utils } from 'ethers';\n\ninterface GetFundingPotId {\n  (\n    arg0: {\n      values: {\n        fundingPotId?: string | null\n      }\n    }\n  ): string | null\n}\n\nconst getFundingPotId: GetFundingPotId = ({ values: { fundingPotId } }) => {\n\n  if (fundingPotId) {\n    return new utils.BigNumber(\n      fundingPotId\n    ).toString();\n  }\n\n  return null;\n\n}\n\nexport default getFundingPotId;","import type { Connection } from './connection';\nimport type { EventData } from './get-events-list';\n\ninterface GetUserAddress {\n  (\n    arg0: {\n      parsedData: EventData['parsed'];\n      connection: Connection;\n      fundingPotId: string | null\n    }\n  ): Promise<string>\n}\n\nconst getUserAddress: GetUserAddress = async ({ parsedData, connection: { client }, fundingPotId }) => {\n\n  let userAddress = parsedData.values.user || '';\n\n  if (!userAddress && fundingPotId) {\n    const { associatedTypeId } = await client.getFundingPot(fundingPotId);\n    const { recipient } = await client.getPayment(associatedTypeId);\n    return recipient;\n  }\n\n  return userAddress;\n\n};\n\nexport default getUserAddress;","import { ColonyRole } from '@colony/colony-js';\nimport { utils } from 'ethers';\nimport { EventData } from './get-events-list';\nimport type { EventType } from './get-events-list'\n\ninterface EventMessage {\n  (\n    arg0: {\n      parsedData: EventData['parsed'],\n      eventType: EventType,\n      userAddress: string | null,\n      fundingPotId: string | null\n    }\n  ): Promise<React.ReactElement>\n}\n\nconst eventMessage: EventMessage = async ({\n  parsedData,\n  eventType,\n  userAddress,\n  fundingPotId\n}) => {\n  \n  const tokenToSymbol = {\n    '0x6B175474E89094C44Da98b954EedeAC495271d0F': 'DAI',\n    '0x0dd7b8f3d1fa88FAbAa8a04A0c7B52FC35D4312c': 'BLNY',\n  };\n\n  const domainId =\n    parsedData.values.domainId ?\n      new utils.BigNumber(parsedData.values.domainId).toString() :\n      '';\n\n  const events = {\n    ColonyInitialised: () => {\n      return (\n        <>Congratulations! It&apos;s a beautiful baby colony!</>\n      );\n    },\n    DomainAdded: () => {\n      return (\n        <>Domain <strong>{domainId}</strong> added</>\n      );\n    },\n    ColonyRoleSet: () => {\n      const role = ColonyRole[parsedData.values.role] || '';\n      return (\n        <>\n          <strong>{role}</strong> role assigned to user{' '}\n          <strong>{userAddress}</strong> in domain{' '}\n          <strong>{domainId}</strong>\n        </>\n      );\n    },\n    PayoutClaimed: () => {\n      let amount = new utils.BigNumber(parsedData.values.amount);\n      const wei = new utils.BigNumber(10);\n      amount = amount.div(wei.pow(18));\n      return (\n        <>\n          User <strong>{userAddress}</strong> claimed{' '}\n          <strong>\n            {amount.toString()}\n            {tokenToSymbol[parsedData.values.token as keyof typeof tokenToSymbol] || ''}\n          </strong>{' '}\n          payout from pot <strong>{fundingPotId}</strong>\n        </>\n      );\n    }\n  }\n\n  return events[eventType] ? events[eventType]() : <>No matching event</>;\n\n};\n\nexport default eventMessage;","import { getLogs, getBlockTime } from '@colony/colony-js';\nimport getFundingPotId from './get-funding-pot-id';\nimport getUserAddress from './get-user-address';\nimport eventMessage from './event-message';\nimport type { Log } from '@ethersproject/abstract-provider';\nimport type { EventType } from './get-events-list';\nimport type { Connection } from './connection';\nimport type { EventItemProps } from '../components/event-card'\n\ninterface PopulateEventFields {\n  (\n    arg0: EventType,\n    arg1: Connection,\n    arg2: Log\n  ): Promise<EventItemProps>\n}\n\nconst populateEventFields: PopulateEventFields = async (eventType, connection, event) => {\n\n  const colonyAddress = '0x5346D0f80e2816FaD329F2c140c870ffc3c3E2Ef';\n  const timestamp = await getBlockTime(connection.provider, event.blockHash);\n  const parsed = connection.client.interface.parseLog(event);\n  const fundingPotId = getFundingPotId(parsed);\n\n  const userAddress = await getUserAddress({\n    parsedData: parsed,\n    connection,\n    fundingPotId\n  });\n\n  const message = await eventMessage({\n    parsedData: parsed,\n    eventType,\n    userAddress,\n    fundingPotId\n  });\n\n  return {\n    userAddress: userAddress || colonyAddress,\n    message,\n    eventType,\n    timestamp,\n  };\n\n};\n\ninterface EventsByType {\n  (\n    arg0: Connection,\n    arg1: EventType\n  ): Promise<EventItemProps[]>\n}\n\nconst eventsByType: EventsByType = async (connection, eventType) => {\n\n  const rawEvents = await getLogs(connection.client, connection.client.filters[eventType]());\n\n  const eventsFields = await Promise.all(rawEvents.map((event) => {\n    return populateEventFields(eventType, connection, event as Log);\n  }));\n\n  return eventsFields;\n\n};\n\nexport default eventsByType;","import { ColonyClient, getColonyNetworkClient, Network } from '@colony/colony-js';\nimport { Filter, InfuraProvider } from 'ethers/providers';\nimport { ethers, Wallet } from 'ethers';\n\nexport interface Connection {\n  provider: ethers.providers.Provider;\n  client: ColonyClient & {\n    filters: {\n      ColonyInitialised: () => Filter;\n      DomainAdded: () => Filter;\n      ColonyRoleSet: () => Filter;\n      PayoutClaimed: () => Filter;\n    }\n  };\n}\n\nconst connect = async (): Promise<Connection> => {\n\n  const MAINNET_NETWORK_ADDRESS = '0x5346D0f80e2816FaD329F2c140c870ffc3c3E2Ef';\n  const MAINNET_BETACOLONY_ADDRESS = '0x869814034d96544f3C62DE2aC22448ed79Ac8e70';\n  const provider = new InfuraProvider();\n  const wallet = Wallet.createRandom();\n  const connectedWallet = wallet.connect(provider);\n\n  const networkClient = getColonyNetworkClient(\n    Network.Mainnet,\n    connectedWallet,\n    {networkAddress: MAINNET_NETWORK_ADDRESS}\n  );\n\n  const colonyClient = await networkClient.getColonyClient(MAINNET_BETACOLONY_ADDRESS);\n\n  return {provider, client: colonyClient as Connection['client']};\n\n};\n\nexport default connect;\n","import eventsByType from './events-by-type';\nimport connect from './connection';\nimport { BigNumberish } from 'ethers/utils';\nimport type { Log } from '@ethersproject/abstract-provider';\nimport type { EventsListType } from '../components/events-list';\n\nexport type EventType =\n  | 'ColonyInitialised'\n  | 'DomainAdded'\n  | 'ColonyRoleSet'\n  | 'PayoutClaimed';\n\nexport type EventData = {\n  event: Log;\n  parsed: {\n    values: {\n      domainId: BigNumberish;\n      role: number;\n      amount: BigNumberish;\n      fundingPotId: BigNumberish;\n      user: string;\n      token: string;\n    };\n  };\n};\n\ninterface GetEventsList {\n  (): Promise<EventsListType>\n}\n\nconst getEventsList: GetEventsList = async () => {\n\n  const connection = await connect();\n\n  const eventTypes: EventType[] = [\n    'ColonyInitialised',\n    'DomainAdded',\n    'ColonyRoleSet',\n    'PayoutClaimed',\n  ];\n\n  const getEvents = eventsByType.bind(null, connection);\n\n  const events = await Promise.all(eventTypes.map(getEvents));\n\n  return events.flat().sort((a, b) => b.timestamp - a.timestamp);\n\n};\n\nexport default getEventsList;\n","import EventsList from \"./EventsList\";\n\nexport type { EventsListType } from './EventsList'\nexport default EventsList;","import { useState, useEffect } from 'react';\nimport EventCard from '../event-card';\nimport Loader from '../loader';\nimport getEventsList from '../../utils/get-events-list';\nimport styles from './EventsList.module.css';\nimport type { EventItemProps } from '../event-card';\n\nexport type EventsListType = EventItemProps[];\n\nconst EventsList = () => {\n\n  const [events, setEvents] = useState<EventsListType>([]);\n  const [hasError, setHasError] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const messageForError =\n    <><h1>Sorry, something has gone wrong.</h1>Please try again in a while.</>;\n  const messageForNone =\n    <h1>No matching events were found.</h1>\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const eventsList = await getEventsList();\n        setEvents(eventsList);\n      } catch (error) {\n        console.warn(error);\n        setHasError(true);\n      }\n      setIsLoaded(true);\n    })();\n  }, []);\n\n  if (hasError) {\n    return <Loader message={messageForError} />;\n  }\n\n  if (!events.length && isLoaded) {\n    return <Loader message={messageForNone} />;\n  }\n\n  if (!events.length) {\n    return <Loader />;\n  }\n\n  return (\n    <ul className={styles.EventsList}>\n      {events.map((event, index) =>\n        <EventCard\n          key={index}\n          timestamp={event.timestamp}\n          message={event.message}\n          userAddress={event.userAddress}\n          eventType={event.eventType}\n        />\n      )}\n    </ul>\n  );\n\n}\n\nexport default EventsList;","import EventsList from './components/events-list';\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <EventsList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport 'normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EventCard\":\"EventCard_EventCard__2E0Pk\",\"fade-in-down\":\"EventCard_fade-in-down__3Qoem\",\"EventCardTitle\":\"EventCard_EventCardTitle__1cPru\",\"EventCardBody\":\"EventCard_EventCardBody__1RL9_\"};"],"sourceRoot":""}